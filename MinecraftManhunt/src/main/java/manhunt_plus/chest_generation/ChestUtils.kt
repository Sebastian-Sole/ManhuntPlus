package manhunt_plus.chest_generation
import org.bukkit.Bukkit
import org.bukkit.Location
import org.bukkit.Material
import org.bukkit.World
import org.bukkit.block.Chest
import org.bukkit.event.block.BlockBreakEvent
import org.bukkit.inventory.ItemStack
import java.util.*

val random = Random()

/**
 * Generates items to add in a chest
 *
 * @return an array list of item stacks with enchantments (if enchantable) to be added to the chest
 */
fun generateChestItems(): MutableList<ItemStack> {
    val itemGenerator = ItemGenerator()

    val itemsToAdd = mutableListOf<ItemStack>()
    val numberOfItemsToAdd = random.nextInt(6) + 5 // At least 5, max 10
    for (i in 0 until numberOfItemsToAdd) { //Generate that amount of random items
        when (random.nextInt(28) + 1) {
            1, 2 -> itemGenerator.generateChestItemStack(0, "chest")?.let { itemsToAdd.add(it) }
            3, 4, 5, 6, 7 -> itemGenerator.generateChestItemStack(1, "chest")?.let { itemsToAdd.add(it) }
            8, 9, 10, 11, 12, 13 -> itemGenerator.generateChestItemStack(2, "chest")?.let { itemsToAdd.add(it) }
            14, 15, 16, 17, 18, 19, 20 -> itemGenerator.generateChestItemStack(3, "chest")?.let { itemsToAdd.add(it) }
            21, 22, 23, 24, 25, 26, 27, 28 -> itemGenerator.generateChestItemStack(4, "chest")?.let { itemsToAdd.add(it) }
        }
    }
    return itemsToAdd
}

fun generateSupplyDropItems(): MutableList<ItemStack> {
    val itemGenerator = ItemGenerator()

    val itemsToAdd = mutableListOf<ItemStack>()
    for (i in 0 .. 7) { //Generate that amount of random items
        when (random.nextInt(10) + 1) {
            1, 2 -> itemGenerator.generateChestItemStack(0, "supplyDrop")?.let { itemsToAdd.add(it) }
            3, 4, 5, 6 -> itemGenerator.generateChestItemStack(1, "supplyDrop")?.let { itemsToAdd.add(it) }
            8, 9, 10 -> itemGenerator.generateChestItemStack(2, "supplyDrop")?.let { itemsToAdd.add(it) }
        }
    }
    return itemsToAdd
}

/**
 * Creates a chest with items for the supply drop
 *
 * @param world the world which the supply drop chest is generated in
 * @param location the location of the generation
 */
fun createSupplyDropChest(world: World, location: Location) {
    val block = world.getBlockAt(location)
    block.type = Material.CHEST
    val chest = block.state as Chest
    val inv = chest.inventory
    val itemsList = generateSupplyDropItems()
    for (stack in itemsList) {
        inv.addItem(stack)
    }
}

/**
 * Create a chest in the location provided with items
 *
 * @param location location where chest should be generated
 * @param event the block break event
 */
fun createChest(location: Location, event: BlockBreakEvent, world: World) {
    val block = world.getBlockAt(location)
    block.type = Material.CHEST
    event.isCancelled = true
    val chest = block.state as Chest
    val inv = chest.inventory
    val itemsList = generateChestItems()
    // Test
    if (inv.getItem(0) == null){
        Bukkit.broadcastMessage("It is null")
    }
    else {
        Bukkit.broadcastMessage(inv.getItem(0)!!.type.name)
    }

    Bukkit.broadcastMessage("Thing" + inv.getItem(0).toString())

    for (stack in itemsList) {
        var notSet = true
        while (notSet) {
            val slot = random.nextInt(27)
            if (inv.getItem(slot) == null) {
                inv.setItem(slot,stack)
                notSet = false
            }
        }
    }
    Bukkit.broadcastMessage("A chest was generated by " + event.player.name)
}